---
import {
  getPostsByTagAndPage,
  getRankedPosts,
  getAllTags,
  getNumberOfPagesByTag,
} from "../../../../../lib/notion/client.ts";
import {
  buildPostFeaturedImageURLs,
  buildURLToImageMap,
} from "../../../../../lib/blog-helpers.ts";
import Layout from "../../../../../layouts/Layout.astro";
import NoContents from "../../../../../components/NoContents.astro";
import PostDate from "../../../../../components/PostDate.astro";
import PostTags from "../../../../../components/PostTags.astro";
import PostTitle from "../../../../../components/PostTitle.astro";
import PostFeaturedImage from "../../../../../components/PostFeaturedImage.astro";
import PostExcerpt from "../../../../../components/PostExcerpt.astro";
import ReadMoreLink from "../../../../../components/ReadMoreLink.astro";
import Pagination from "../../../../../components/Pagination.astro";
import BlogPostsLink from "../../../../../components/BlogPostsLink.astro";
import BlogTagsLink from "../../../../../components/BlogTagsLink.astro";
import TwitterTl from "../../../../../components/TwitterTl.astro";
import tako from "/tako.svg";
import onigiri from "/onigiri.svg";
import styles from "../../../../../styles/blog.module.css";

export async function getStaticPaths() {
  const allTags = await getAllTags();

  let params = [];

  await Promise.all(
    allTags.map((tag: string) => {
      return getNumberOfPagesByTag(tag).then((numberOfPages: number) => {
        for (let i = 2; i <= numberOfPages; i++) {
          params.push({ params: { tag: tag, page: i.toString() } });
        }
      });
    })
  );

  return params;
}

const { tag, page } = Astro.params;

const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getPostsByTagAndPage(tag, parseInt(page, 10)),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPagesByTag(tag),
]);

const imageURLs = buildPostFeaturedImageURLs(posts).filter((url) => url);
const imageURLMap = await buildURLToImageMap(imageURLs);
---

<Layout
  title={`Posts in ${tag} ${page}/${numberOfPages}`}
  path={`/blog/tag/${tag}/page/${page}`}
>
  <div className={styles.container}>
    <main>
      <header>
        <h2>Posts in {tag} {page}/{numberOfPages}</h2>
      </header>
      <div className={styles.twoPosts}>
        {
          posts.length === 0 ? (
            <NoContents contents={posts} />
          ) : (
            posts.map((post) => (
              <div className={styles.post} key={post.Slug}>
                <div className={styles.postFlex}>
                  <div className={styles.postFlex2}>
                    <div>
                      <PostDate post={post} />
                      <PostTags post={post} />
                    </div>
                    <img src={onigiri} width={100} height={100} alt="onigiri" />
                  </div>
                  <div>
                    <PostTitle post={post} />
                    <PostFeaturedImage post={post} urlMap={imageURLMap} />
                    <PostExcerpt post={post} />
                  </div>

                  <div className={styles.postReadFlex}>
                    <img src={tako} width={80} height={80} alt="tako" />
                    <div>
                      <ReadMoreLink post={post} />
                    </div>
                  </div>
                </div>
              </div>
            ))
          )
        }
      </div>

      <aside>
        <BlogPostsLink heading="Recommended" posts={rankedPosts} />
        <BlogTagsLink heading="Categories" tags={tags} />
        <TwitterTl />
      </aside>
    </main>
    <footer>
      <Pagination
        tag={tag}
        currentPage={parseInt(page, 10)}
        numberOfPages={numberOfPages}
      />
    </footer>
  </div>
</Layout>
